import pandas as pd
from sklearn.metrics.pairwise import cosine_similarity
from sklearn.preprocessing import StandardScaler
from feature_engineering_pipeline import FeatureEngineeringPipeline

def calculate_similarity(df, features):
    # Normalize features
    scaler = StandardScaler()
    df_normalized = df.copy()
    df_normalized[features] = scaler.fit_transform(df[features])
    
    # Split the data into private wealth and non-private wealth users
    pwm_users = df_normalized[df_normalized['seg_code'] == 'PWM']
    non_pwm_users = df_normalized[df_normalized['seg_code'] != 'PWM']
    
    # Calculate cosine similarity
    similarities = cosine_similarity(non_pwm_users[features], pwm_users[features])
    
    # For each non-private wealth user, find the max similarity score with any private wealth user
    non_pwm_users['max_similarity'] = similarities.max(axis=1)
    
    return non_pwm_users[['hh_id_in_wh', 'max_similarity']]

def evaluate_prospects(similarity_df, validswitches_df):
    # Merge to see which ones were correctly identified as prospects
    evaluation_df = pd.merge(similarity_df, validswitches_df, on='hh_id_in_wh', how='left')
    evaluation_df['correctly_identified'] = evaluation_df['switch_date'].notna()
    
    # Summary statistics
    correct_prospects = evaluation_df['correctly_identified'].sum()
    total_prospects = evaluation_df['correctly_identified'].count()
    
    print(f"Correctly Identified Prospects: {correct_prospects}")
    print(f"Total Identified Prospects: {total_prospects}")
    print(f"Accuracy: {correct_prospects / total_prospects:.2%}")
    
    return evaluation_df




import pandas as pd
from feature_engineering_pipeline import FeatureEngineeringPipeline
from model_pipeline import calculate_similarity, evaluate_prospects

# Assuming the data is loaded
df = pd.read_csv('path/to/your/data.csv')
validswitches_df = pd.read_csv('path/to/your/validswitches.csv')

# Feature Engineering
pipeline = FeatureEngineeringPipeline(df)
df_enriched = pipeline.execute()

# Define your feature list
features = ['feature1', 'feature2', 'account_longevity', 'total_balance', 'product_diversity']  # Update this list

# Calculate Similarity
similarity_df = calculate_similarity(df_enriched, features)

# Evaluate
evaluation_df = evaluate_prospects(similarity_df, validswitches_df)


